# Ref https://www.petrockblock.com/2018/06/24/design-patterns-plantuml-decorator-pattern/
# Ref https://gmlwjd9405.github.io/2018/07/09/decorator-pattern.html
# Ref https://gdtbgl93.tistory.com/9

@startuml
skinparam componentStyle uml2

class Component {
  methodA()
  methodB()
}
class ConcreteComponent {
  methodA()
  methodB()
}
class Decorator {
  Component
  methodA()
  methodB()
}
class ConcreteDecoratorA
class ConcreteDecoratorB

ConcreteDecoratorA : Component wrappedObject
ConcreteDecoratorA : methodA()
ConcreteDecoratorA : methodB()
ConcreteDecoratorA : newBehavior()
ConcreteDecoratorA : // otherMethods()

ConcreteDecoratorB : Component wrappedObject
ConcreteDecoratorB : Object newState
ConcreteDecoratorB : methodA()
ConcreteDecoratorB : methodB()
ConcreteDecoratorB : // otherMethods()

Component <|–- ConcreteComponent
Component <|–- Decorator
Component –-o Decorator
Decorator <|–- ConcreteDecoratorA
Decorator <|–- ConcreteDecoratorB

note right on link
Each component can be used on its
own, or wrapped by a decorator
component
end note

note bottom of ConcreteComponent
The ConreteComponent
is the object we are going
to dynamically add new
behavior to it. It extends
Component.
end note

note bottom of Decorator
Decorators implement the
same interface or abstract
class as the component they
are going to decorate.
end note

note bottom of ConcreteDecoratorB
Decorators can extend the
state of the component
end note

note bottom of ConcreteDecoratorB
Decorators can add new methods;
however, new behavior is typically
added by doing computation
before or after an existing method
in the component.
end note

note bottom of ConcreteDecoratorA
The ConcreteDecorator has an
instance variable for the thing
it decorates (the Component the
Decorator wraps).
end note
@enduml