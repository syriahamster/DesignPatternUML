# Ref https://www.petrockblock.com/2018/08/21/design-patterns-plantuml-iterator-pattern/

@startuml
class Aggregate <<interface>>
class Client
class Iterator <<interface>>
together {
class ConcreteAggregate
class ConcreteIterator
}

Aggregate : createIterator()
ConcreteAggregate : createIterator()
Iterator : hasNext()
Iterator : next()
Iterator : remove()
ConcreteIterator : hasNext()
ConcreteIterator : next()
ConcreteIterator : remove()

Aggregate <- Client
Client -> Iterator
ConcreteAggregate -> ConcreteIterator
Iterator <|.. ConcreteIterator
Aggregate <|.. ConcreteAggregate

note top of Aggregate
Having a common interface for your
aggregates is handy for your client;
it decouples your client from the
implementation of your collection of objects.
end note

note bottom of ConcreteAggregate
The ConcreteAggregate
has a collection of
objects and implements
the method that
returns an Iterator
for its collection.
end note

note “Each ConcreteAggregate\nis responsible for\ninstantiating a\nConcreteIterator that\ncan iterate over its\ncollection of objects.” as n1
ConcreteAggregate .. n1
n1 .. ConcreteIterator

note bottom of ConcreteIterator
The ConcreteIterator is
responsible for managing
the current position of
the iteration.
end note

note top of Iterator
The Iterator interface
provides the interface
that all iterators
must implement, and
a set of methods
for traversing over
elements of a collection.
Here we are using the
java.util.Iterator. If you
do not want to use Java’s
Iterator interface, you
can always create your
own.
end note
@enduml